---
- name: Install Apache2, base modules and extra modules (Debian)
  action:
    module: "{{ ansible_pkg_mgr }}"
    pkg: "{{ item }}"
    state: present
  with_flattened:
    - "{{ apache2_base_base_packages[ansible_os_family] }}"
    - "{{ apache2_base_extra_packages[ansible_os_family] }}"

- name: Remove default cruft
  file:
    name: "{{ item }}"
    state: absent
  with_items: "{{ apache2_base_redundant_cruft[ansible_os_family] }}"
  notify: Reload apache

# Figure out what version of Apache is installed.
- name: Get installed version of Apache.
  command: "{{ apache2_base_daemon[ansible_os_family] }} -v"
  changed_when: false
  always_run: yes
  register: _apache_version

- name: Create apache_version variable.
  set_fact:
    apache_version: "{{ _apache_version.stdout.split()[2].split('/')[1] }}"

- name: Print detected software version
  debug: var=apache_version

- name: Find Apache2 modules enabled on the host
  shell: "{{ apache2_base_find_redundant_modules_cmd[ansible_os_family] }}"
  register: _current_modules
  always_run: yes
  changed_when: False

- name: Determine the list of configured modules (PHP enabled)
  action: set_fact apache_modules="{{ apache2_base_base_modules[ansible_os_family] + apache2_base_extra_modules[ansible_os_family] + apache2_base_base_php_modules[ansible_os_family] }}"
  when: apache2_base_php_enabled == True

- name: Determine the list of configured modules (PHP disabled)
  action: set_fact apache_modules="{{ apache2_base_base_modules[ansible_os_family] + apache2_base_extra_modules[ansible_os_family] }}"
  when: apache2_base_php_enabled == False

- name: Print enabled modules
  debug: var=apache_modules

- name: Disable modules that currently are not in use (Debian)
  apache2_module:
    name: "{{ item }}"
    state: absent
  with_items: _current_modules.stdout_lines
  when: ansible_os_family == 'Debian' and item not in apache_modules
  notify: Restart apache

- name: Enable apache2 modules that were configured (Debian)
  apache2_module:
    name: "{{ item }}"
    state: present
  with_items: apache_modules
  when: ansible_os_family == 'Debian' and item not in _current_modules.stdout_lines
  notify: Restart apache

- name: Remove redundant module configuration (RedHat)
  file:
    name: "/etc/httpd/conf.modules.d/{{ item }}"
    state: absent
  with_items: _current_modules.stdout_lines
  when: ansible_os_family == 'RedHat' and item not in apache_modules
  notify: Restart apache

# FIXME - I do not like it, Would be better to just put there a bunch of "if"s
- name: Enable all sane modules (RedHat)
  template:
    src: apache2/base_moduleconfig.RedHat.conf.j2
    dest: /etc/httpd/conf.modules.d/00-base.conf
    mode: 0644
    owner: root
    group: root
  notify: Restart apache
  when: ansible_os_family == 'RedHat'

- name: Upload configuration templates
  template:
    src: "apache2/{{ item }}.j2"
    dest: "{{ apache2_base_server_root[ansible_os_family] }}/{{ apache2_base_conf_files_locations[ansible_os_family][item] }}"
    mode: 0644
    owner: root
    group: root
  notify: Restart apache
  when: item in apache2_base_conf_files_locations[ansible_os_family]
  with_items:
    - apache2.conf
    - mime.conf
    - mime_magic.conf

- name: Enable Apache2 service
  service:
    name: "{{ apache2_base_daemon[ansible_os_family] }}"
    enabled: yes

# It's functional tasks's role to start the service. Otherwise you will get
# chicken and egg problems with configuration errors.
